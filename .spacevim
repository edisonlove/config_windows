function! Layers()
    "Layer 'fzf'
    Layer 'unite'
    Layer 'better-defaults'
    " For chinese users
    Layer 'chinese'
	Layer 'syntax-checking'
	Layer 'auto-completion'
	Layer 'python'
	Layer 'c-c++'
	Layer 'java'
	Layer 'html'
	Layer 'markdown'
	Layer 'airline'
	Layer 'git'
	Layer 'programming'
	Layer 'text-align'
endfunction

function! UserInit()
" 将外部命令 wmctrl 控制窗口最大化的命令行参数封装成一个 vim 的函数
fun! ToggleFullscreen()
	call libcallnr("gvimfullscreen.dll", "ToggleFullScreen", 0)
endf
" 全屏开/关快捷键
map <silent> <F11> :call ToggleFullscreen()<CR>
" 启动 vim 时自动全屏
autocmd VimEnter * call ToggleFullscreen()

" 主题
Plug 'altercation/vim-colors-solarized'
Plug 'tomasr/molokai'
Plug 'vim-airline/vim-airline-themes'
" 语法检查
Plug 'w0rp/ale'
" 自动补全
Plug 'Shougo/neocomplete.vim'
" 缩进
Plug 'nathanaelkane/vim-indent-guides'
" cpp/h快速切换
Plug 'derekwyatt/vim-fswitch'
" surround
Plug 'tpope/vim-surround'
" taglist
Plug 'majutsushi/tagbar'
endfunction

function! UserConfig()
let mapleader="\<Space>"
nnoremap Q :qa!<CR>
nnoremap E :e!<CR>

noremap <C-s> :update<CR>  
vnoremap <C-s> <C-C>:update<CR>  
inoremap <C-s> <C-O>:update<CR>  

unmap ;
nnoremap H H
nnoremap L L

" 滚动buffer
set so=3

" 开启实时搜索功能
set incsearch

" 搜索时大小写不敏感
set ignorecase

" 关闭兼容模式
set nocompatible

" vim 自身命令行模式智能补全
set wildmenu

" vim 默认使用系统剪切板
set clipboard=unnamed

" 高亮显示搜索结果
set hlsearch

" 配色方案
colorscheme molokai 
let g:airline_powerline_fonts=1
set guifont=DejaVu\ Sans\ Mono\ for\ Powerline:h13

" 禁止光标闪烁
set gcr=n-v-c:block-Cursor/lCursor-blinkon0,ve:ver35-Cursor-blinkon0,o:hor50-Cursor-blinkon0,i-ci:ver25-Cursor/lCursor-blinkon0,r-cr:hor20-Cursor/lCursor-blinkon0,sm:block-Cursor-blinkon0

" 禁止显示滚动条
set guioptions-=l
set guioptions-=L
set guioptions-=r
set guioptions-=R

" 禁止显示菜单和工具条
set guioptions-=m
set guioptions-=T

" 自适应不同语言的智能缩进
filetype indent on
" 将制表符扩展为空格
set expandtab
" 设置编辑时制表符占用空格数
set tabstop=4
" 设置格式化时制表符占用空格数
set shiftwidth=4
" 让 vim 把连续数量的空格视为一个制表符
set softtabstop=4

" 随 vim 自启动
let g:indent_guides_enable_on_vim_startup=1
" 从第二层开始可视化显示缩进
let g:indent_guides_start_level=2
" 色块宽度
let g:indent_guides_guide_size=1
" 快捷键 i 开/关缩进可视化
:nmap <silent> <Leader>i <Plug>IndentGuidesToggle

" *.cpp 和 *.h 间切换
nmap <silent> <Leader>sw :FSHere<cr>

" 语法检查配置
let g:ale_python_pylint_executable = 'python3'
let g:ale_python_pylint_options = '-rcfile ~/pylint.rc'

" 文件浏览
let NERDTreeWinSize=22
" 设置 NERDTree 子窗口位置
let NERDTreeWinPos="right"
" 显示隐藏文件
let NERDTreeShowHidden=1
" NERDTree 子窗口中不显示冗余帮助信息
let NERDTreeMinimalUI=1
" 删除文件时自动删除文件对应 buffer
let NERDTreeAutoDeleteBuffer=1

" 查看tag
let tagbar_left=1
map <C-o> :TagbarToggle<CR>
let tagbar_width=32
let g:tagbar_compact=1
let g:tagbar_type_cpp = {
     \ 'ctagstype' : 'c++',
     \ 'kinds'     : [
         \ 'c:classes:0:1',
         \ 'd:macros:0:1',
         \ 'e:enumerators:0:0', 
         \ 'f:functions:0:1',
         \ 'g:enumeration:0:1',
         \ 'l:local:0:1',
         \ 'm:members:0:1',
         \ 'n:namespaces:0:1',
         \ 'p:functions_prototypes:0:1',
         \ 's:structs:0:1',
         \ 't:typedefs:0:1',
         \ 'u:unions:0:1',
         \ 'v:global:0:1',
         \ 'x:external:0:1'
     \ ],
     \ 'sro'        : '::',
     \ 'kind2scope' : {
         \ 'g' : 'enum',
         \ 'n' : 'namespace',
         \ 'c' : 'class',
         \ 's' : 'struct',
         \ 'u' : 'union'
     \ },
     \ 'scope2kind' : {
         \ 'enum'      : 'g',
         \ 'namespace' : 'n',
         \ 'class'     : 'c',
         \ 'struct'    : 's',
         \ 'union'     : 'u'
     \ }
\ }

set tags=tags;
set autochdir
endfunction
